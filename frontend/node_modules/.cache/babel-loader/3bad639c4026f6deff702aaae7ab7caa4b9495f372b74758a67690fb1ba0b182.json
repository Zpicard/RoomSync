{"ast":null,"code":"var _jsxFileName = \"/Users/zacharypicard/Desktop/School/CIS 469/Final-CIS-469-Project/roommate-app/frontend/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth } from '../api/client';\nimport { useNavigate } from 'react-router-dom';\nimport { household } from '../api/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!token;\n  const navigate = useNavigate();\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n          const response = await auth.getProfile();\n          const userData = response.data;\n\n          // Always use the householdId from the backend response\n          // This ensures we have the most up-to-date group membership state\n          setUser(userData);\n          setToken(storedToken);\n\n          // Update localStorage with the latest householdId\n          if (userData.householdId) {\n            localStorage.setItem('householdId', userData.householdId);\n          } else {\n            localStorage.removeItem('householdId');\n          }\n        }\n      } catch (error) {\n        console.error('Failed to initialize auth:', error);\n        // Clear invalid token and householdId\n        localStorage.removeItem('token');\n        localStorage.removeItem('householdId');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Add a function to refresh user's group membership state\n  const refreshUserGroupState = async () => {\n    try {\n      if (!token) {\n        console.log('No token available, skipping group state refresh');\n        return;\n      }\n      const response = await auth.getProfile();\n      const userData = response.data;\n\n      // Update user state\n      setUser(userData);\n\n      // Update localStorage with the latest householdId\n      if (userData.householdId) {\n        localStorage.setItem('householdId', userData.householdId);\n        console.log('Updated householdId in localStorage:', userData.householdId);\n      } else {\n        localStorage.removeItem('householdId');\n        console.log('Removed householdId from localStorage');\n      }\n\n      // Also try to get current household details to verify membership\n      try {\n        const householdResponse = await household.getCurrent();\n        console.log('Current household details:', householdResponse);\n      } catch (householdError) {\n        console.error('Error fetching current household:', householdError);\n      }\n    } catch (error) {\n      var _error$response;\n      console.error('Failed to refresh user group state:', error);\n      // If we get a 401, clear the token and redirect to login\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        logout();\n      }\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await auth.login(email, password);\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n      if (user.householdId) {\n        localStorage.setItem('householdId', user.householdId);\n      }\n      navigate('/');\n    } catch (error) {\n      setError('Invalid email or password');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      setError(null);\n      const response = await auth.register(username, email, password);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Set token first\n      setToken(token);\n      localStorage.setItem('token', token);\n\n      // Then set user\n      setUser(user);\n\n      // Save householdId if it exists\n      if (user.householdId) {\n        localStorage.setItem('householdId', user.householdId);\n      }\n\n      // Navigate to dashboard after successful registration\n      navigate('/');\n      return Promise.resolve();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed. Please try again.';\n      setError(errorMessage);\n      console.error('Registration error:', error);\n      return Promise.reject(error);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('householdId');\n    setToken(null);\n    setUser(null);\n    navigate('/login');\n  };\n  const updateUser = updatedUser => {\n    setUser(updatedUser);\n\n    // Update householdId in localStorage if it changed\n    if (updatedUser.householdId) {\n      localStorage.setItem('householdId', updatedUser.householdId);\n    } else {\n      localStorage.removeItem('householdId');\n    }\n  };\n  const signup = async (email, password, name) => {\n    // Implementation for signup method\n  };\n  const value = {\n    user,\n    token,\n    error,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser,\n    signup,\n    refreshUserGroupState\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 via-indigo-900 to-purple-900\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"WAiMYr4fARkcQgmeW8h2wjC/3lw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","useNavigate","household","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","error","setError","isLoading","setIsLoading","isAuthenticated","navigate","initializeAuth","storedToken","localStorage","getItem","response","getProfile","userData","data","householdId","setItem","removeItem","console","refreshUserGroupState","log","householdResponse","getCurrent","householdError","_error$response","status","logout","login","email","password","register","username","Promise","resolve","_error$response2","_error$response2$data","errorMessage","reject","updateUser","updatedUser","signup","name","value","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/zacharypicard/Desktop/School/CIS 469/Final-CIS-469-Project/roommate-app/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth } from '../api/client';\nimport { useNavigate } from 'react-router-dom';\nimport { User } from '../types/user';\nimport { household } from '../api/client';\n\ninterface AuthResponse {\n  token: string;\n  user: User;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  error: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (updatedUser: User) => void;\n  signup: (email: string, password: string, name: string) => Promise<void>;\n  refreshUserGroupState: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!token;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        \n        if (storedToken) {\n          const response = await auth.getProfile();\n          const userData = response.data as User;\n          \n          // Always use the householdId from the backend response\n          // This ensures we have the most up-to-date group membership state\n          setUser(userData);\n          setToken(storedToken);\n          \n          // Update localStorage with the latest householdId\n          if (userData.householdId) {\n            localStorage.setItem('householdId', userData.householdId);\n          } else {\n            localStorage.removeItem('householdId');\n          }\n        }\n      } catch (error) {\n        console.error('Failed to initialize auth:', error);\n        // Clear invalid token and householdId\n        localStorage.removeItem('token');\n        localStorage.removeItem('householdId');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Add a function to refresh user's group membership state\n  const refreshUserGroupState = async () => {\n    try {\n      if (!token) {\n        console.log('No token available, skipping group state refresh');\n        return;\n      }\n\n      const response = await auth.getProfile();\n      const userData = response.data as User;\n      \n      // Update user state\n      setUser(userData);\n      \n      // Update localStorage with the latest householdId\n      if (userData.householdId) {\n        localStorage.setItem('householdId', userData.householdId);\n        console.log('Updated householdId in localStorage:', userData.householdId);\n      } else {\n        localStorage.removeItem('householdId');\n        console.log('Removed householdId from localStorage');\n      }\n\n      // Also try to get current household details to verify membership\n      try {\n        const householdResponse = await household.getCurrent();\n        console.log('Current household details:', householdResponse);\n      } catch (householdError) {\n        console.error('Error fetching current household:', householdError);\n      }\n    } catch (error: any) {\n      console.error('Failed to refresh user group state:', error);\n      // If we get a 401, clear the token and redirect to login\n      if (error.response?.status === 401) {\n        logout();\n      }\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await auth.login(email, password);\n      const { token, user } = response.data as AuthResponse;\n      \n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n      \n      if (user.householdId) {\n        localStorage.setItem('householdId', user.householdId);\n      }\n      \n      navigate('/');\n    } catch (error) {\n      setError('Invalid email or password');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (username: string, email: string, password: string) => {\n    try {\n      setError(null);\n      const response = await auth.register(username, email, password);\n      const { token, user } = response.data as AuthResponse;\n      \n      // Set token first\n      setToken(token);\n      localStorage.setItem('token', token);\n      \n      // Then set user\n      setUser(user);\n      \n      // Save householdId if it exists\n      if (user.householdId) {\n        localStorage.setItem('householdId', user.householdId);\n      }\n      \n      // Navigate to dashboard after successful registration\n      navigate('/');\n      \n      return Promise.resolve();\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.error || 'Registration failed. Please try again.';\n      setError(errorMessage);\n      console.error('Registration error:', error);\n      return Promise.reject(error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('householdId');\n    setToken(null);\n    setUser(null);\n    navigate('/login');\n  };\n\n  const updateUser = (updatedUser: User) => {\n    setUser(updatedUser);\n    \n    // Update householdId in localStorage if it changed\n    if (updatedUser.householdId) {\n      localStorage.setItem('householdId', updatedUser.householdId);\n    } else {\n      localStorage.removeItem('householdId');\n    }\n  };\n\n  const signup = async (email: string, password: string, name: string) => {\n    // Implementation for signup method\n  };\n\n  const value = {\n    user,\n    token,\n    error,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser,\n    signup,\n    refreshUserGroupState\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 via-indigo-900 to-purple-900\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}