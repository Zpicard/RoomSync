{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(undefined);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{const savedTheme=localStorage.getItem('theme');return savedTheme||'light';});useEffect(()=>{const root=window.document.documentElement;root.classList.remove('light','dark');root.classList.add(theme);localStorage.setItem('theme',theme);},[theme]);const toggleTheme=()=>{setTheme(prevTheme=>prevTheme==='light'?'dark':'light');};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","savedTheme","localStorage","getItem","root","window","document","documentElement","classList","remove","add","setItem","toggleTheme","prevTheme","Provider","value","useTheme","context","Error"],"sources":["/Users/zacharypicard/Desktop/School/CIS 469/Final-CIS-469-Project/roommate-app/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAA+BO,SAAS,CAAC,CAE3E,MAAO,MAAM,CAAAC,aAAsD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACjF,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAQ,IAAM,CAC9C,KAAM,CAAAU,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,MAAQ,CAAAF,UAAU,EAAc,OAAO,CACzC,CAAC,CAAC,CAEFX,SAAS,CAAC,IAAM,CACd,KAAM,CAAAc,IAAI,CAAGC,MAAM,CAACC,QAAQ,CAACC,eAAe,CAC5CH,IAAI,CAACI,SAAS,CAACC,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,CACtCL,IAAI,CAACI,SAAS,CAACE,GAAG,CAACX,KAAK,CAAC,CACzBG,YAAY,CAACS,OAAO,CAAC,OAAO,CAAEZ,KAAK,CAAC,CACtC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAa,WAAW,CAAGA,CAAA,GAAM,CACxBZ,QAAQ,CAACa,SAAS,EAAIA,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAO,CAAC,CACjE,CAAC,CAED,mBACEpB,IAAA,CAACC,YAAY,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEhB,KAAK,CAAEa,WAAY,CAAE,CAAAd,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAkB,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAG5B,UAAU,CAACK,YAAY,CAAC,CACxC,GAAIuB,OAAO,GAAKtB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAuB,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}